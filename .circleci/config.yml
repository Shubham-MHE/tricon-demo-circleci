# version: 2.1

# jobs:
#   test:
#     docker:
#       - image: cimg/python:3.10
#     parallelism: 4   #  4 containers will run in parallel
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: pip install -r requirements.txt
#       - run:
#           name: Run tests in parallel
#           command: |
#             circleci tests split --split-by=timings test-files.txt | xargs pytest -v

# workflows:
#   version: 2
#   test-workflow:
#     jobs:
#       - test

version: 2.1

jobs:
  run-small:
    docker:
      - image: cimg/python:3.11
    resource_class: small
    steps:
      - run:
          name: "Run CPU test on small (1 CPU)"
          command: |
            echo '
            import time
            start = time.time()
            def is_prime(n):
                if n < 2: return False
                for i in range(2, int(n**0.5)+1):
                    if n % i == 0:
                        return False
                return True
            primes = [x for x in range(2, 200000) if is_prime(x)]
            print(f"Found {len(primes)} primes")
            print("Time taken:", round(time.time()-start, 2), "seconds")
            ' | python

  run-medium:
    docker:
      - image: cimg/python:3.11
    resource_class: medium
    steps:
      - run:
          name: "Run CPU test on medium (2 CPUs)"
          command: |
            echo '
            import time, multiprocessing
            start = time.time()
            def is_prime(n):
                if n < 2: return False
                for i in range(2, int(n**0.5)+1):
                    if n % i == 0:
                        return False
                return True
            def worker(nums):
                return [x for x in nums if is_prime(x)]
            chunks = [range(2,100000), range(100000,200000)]
            with multiprocessing.Pool(2) as pool:
                results = pool.map(worker, chunks)
            primes = [p for sub in results for p in sub]
            print(f"Found {len(primes)} primes")
            print("Time taken:", round(time.time()-start, 2), "seconds")
            ' | python

workflows:
  demo:
    jobs:
      - run-small
      - run-medium
